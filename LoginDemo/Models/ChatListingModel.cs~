using System;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace LoginDemo.Models
{
    public class ChatListingModel
    {
        public ChatListingModel()
        {
        }
    }
}

public class EmergencyRecentsViewModel : OnesourceObservableObject
{
    private readonly IApi _api;
    public Task Initialization { get; }

    public EmergencyRecentsViewModel(IApi api)
    {

        _api = api;
        Initialization = InitializationAsync();
    }

    private async Task InitializationAsync()
    {
        var result = await _api.AllMessages($"Bearer {App.userToken}", new FilterInboxParamsModel
        {

            FilterType = "all",
            ReadOrUnread = "",
            MsgTypes = new string[]{
"group_ptt",
"ptt",
"emergency",
},
            ShowDeleted = false,
            FolderName = null,
            SendReceived = "received"

        });

        AllMessages = new ObservableCollection<MessageEntryModel>(result.OrderByDescending(x => x.CreatedDate).ToList());
        PTT = new ObservableCollection<MessageEntryModel>(result.OrderByDescending(x => x.CreatedDate)
        .Where(x => x.MessageTypeString == "ptt").ToList());
        GroupPtt = new ObservableCollection<MessageEntryModel>(result.OrderByDescending(x => x.CreatedDate)
        .Where(x => x.MessageTypeString == "group_ptt").ToList());
        Emergency = new ObservableCollection<MessageEntryModel>(result.OrderByDescending(x => x.CreatedDate)
        .Where(x => x.MessageTypeString == "emergency").ToList());

        var notiResult = await _api.AllMessages($"Bearer {App.userToken}", new FilterInboxParamsModel
        {
            FilterType = "all",
            ReadOrUnread = "",
            MsgTypes = new string[] { "notification" },
            ShowDeleted = false,
            FolderName = null,
            SendReceived = "both"

        });
        Notifications = new ObservableCollection<MessageEntryModel>(notiResult.OrderByDescending(x => x.CreatedDate).ToList());

        IsNotificationListEmpty = (Notifications.Count() == 0);
        OnChanged("IsNotificationListEmpty");


        OnChanged("AllMessages");
        OnChanged("PTT");
        OnChanged("GroupPtt");
        OnChanged("Emergency");
        OnChanged("Notifications");
        IsAllMessageEmpty = (AllMessages.Count() == 0);
        OnChanged("IsAllMessageEmpty");
        IsPttListEmpty = (PTT.Count() == 0);
        OnChanged("IsPttListEmpty");
        IsGroupListEmpty = (GroupPtt.Count() == 0);
        OnChanged("IsGroupListEmpty");
        IsEmergencyListEmpty = (Emergency.Count() == 0);
        OnChanged("IsEmergencyListEmpty");



        var feed = await _api.FeedAll($"Bearer {App.userToken}");
        FeedMessages = new ObservableCollection<FeedModel>(feed.OrderByDescending(x => x.Created).ToList());
        OnChanged("FeedMessages");
    }

    public ObservableCollection<MessageEntryModel> AllMessages { get; set; }
    public ObservableCollection<MessageEntryModel> Notifications { get; set; }


    public ObservableCollection<MessageEntryModel> PTT { get; set; }

    public ObservableCollection<MessageEntryModel> GroupPtt { get; set; }

    public ObservableCollection<MessageEntryModel> Emergency { get; set; }

    public ObservableCollection<FeedModel> FeedMessages { get; set; }
    public bool IsAllMessageEmpty { get; set; }
    public bool IsPttListEmpty { get; set; }

    public bool IsGroupListEmpty { get; set; }

    public bool IsEmergencyListEmpty { get; set; }

    public bool IsNotificationListEmpty { get; set; }


}

public class ChatListingObservableObject : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;
    public void OnChanged(string p)
    {
        var changed = PropertyChanged;
        if (changed == null)
            return;
        changed.Invoke(this, new PropertyChangedEventArgs(p));
    }
}